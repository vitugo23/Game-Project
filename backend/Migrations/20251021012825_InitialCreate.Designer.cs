// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gameProject.Data;

#nullable disable

namespace gameProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021012825_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("gameProject.Models.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChoiceOrder")
                        .HasColumnType("int")
                        .HasColumnName("choice_order");

                    b.Property<string>("ChoiceText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("choice_text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_Choices_QuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("gameProject.Models.GameRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("GameDurationSeconds")
                        .HasColumnType("int")
                        .HasColumnName("game_duration_seconds");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("int")
                        .HasColumnName("game_session_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int>("TotalPlayers")
                        .HasColumnType("int")
                        .HasColumnName("total_players");

                    b.Property<int?>("WinnerPlayerId")
                        .HasColumnType("int")
                        .HasColumnName("winner_player_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GameRecords_CreatedAt");

                    b.HasIndex("GameSessionId")
                        .IsUnique()
                        .HasDatabaseName("IX_GameRecords_GameSessionId");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_GameRecords_QuizId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("Game Records");
                });

            modelBuilder.Entity("gameProject.Models.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("CurrentQuestionEndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("current_question_end_time");

                    b.Property<int>("CurrentQuestionNumber")
                        .HasColumnType("int")
                        .HasColumnName("current_question_number");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ended_at");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_GameSessions_QuizId");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_GameSessions_RoomId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_GameSessions_Status");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("gameProject.Models.Leaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int")
                        .HasColumnName("correct_answers");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("int")
                        .HasColumnName("game_session_id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<int>("TotalAnswers")
                        .HasColumnType("int")
                        .HasColumnName("total_answers");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("IX_Leaderboards_GameSessionId");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("IX_Leaderboards_PlayerId");

                    b.HasIndex("GameSessionId", "PlayerId")
                        .IsUnique()
                        .HasDatabaseName("IX_Leaderboards_Session_Player");

                    b.HasIndex("GameSessionId", "Score")
                        .HasDatabaseName("IX_Leaderboards_Session_Score");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("gameProject.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit")
                        .HasColumnName("is_connected");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit")
                        .HasColumnName("is_ready");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_Players_RoomId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Players_UserId");

                    b.HasIndex("UserId", "RoomId")
                        .IsUnique()
                        .HasDatabaseName("IX_Players_UserId_RoomId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("gameProject.Models.PlayerAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnswerTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("answer_time")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int")
                        .HasColumnName("choice_id");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("int")
                        .HasColumnName("game_session_id");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<double>("TimeTakenSeconds")
                        .HasColumnType("float")
                        .HasColumnName("time_taken_seconds");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("IX_PlayerAnswers_GameSessionId");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("IX_PlayerAnswers_PlayerId");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_PlayerAnswers_QuestionId");

                    b.HasIndex("PlayerId", "QuestionId", "GameSessionId")
                        .IsUnique()
                        .HasDatabaseName("IX_PlayerAnswers_Player_Question_Session");

                    b.ToTable("PlayerAnswers");
                });

            modelBuilder.Entity("gameProject.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int")
                        .HasColumnName("question_order");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("question_text");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int")
                        .HasColumnName("time_limit");

                    b.Property<int?>("quiz_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_Questions_QuizId");

                    b.HasIndex("QuizId", "QuestionOrder")
                        .HasDatabaseName("IX_Questions_QuizId_Order");

                    b.ToTable("questions", t =>
                        {
                            t.Property("quiz_id")
                                .HasColumnName("quiz_id1");
                        });
                });

            modelBuilder.Entity("gameProject.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("creator_id");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("quiz_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("IX_Quizzes_CreatorId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("gameProject.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("HostUserId")
                        .HasColumnType("int")
                        .HasColumnName("host_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int")
                        .HasColumnName("max_players");

                    b.Property<string>("RoomCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("room_code");

                    b.HasKey("Id");

                    b.HasIndex("HostUserId")
                        .HasDatabaseName("IX_Rooms_HostUserId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Rooms_IsActive");

                    b.HasIndex("RoomCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Rooms_RoomCode");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("gameProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthUuid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("auth_uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("AuthUuid")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_AuthUuid");

                    b.HasIndex("Username")
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("gameProject.Models.Choice", b =>
                {
                    b.HasOne("gameProject.Models.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("gameProject.Models.GameRecord", b =>
                {
                    b.HasOne("gameProject.Models.GameSession", "GameSession")
                        .WithOne("GameRecord")
                        .HasForeignKey("gameProject.Models.GameRecord", "GameSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gameProject.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gameProject.Models.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GameSession");

                    b.Navigation("Quiz");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("gameProject.Models.GameSession", b =>
                {
                    b.HasOne("gameProject.Models.Quiz", "Quiz")
                        .WithMany("GameSessions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gameProject.Models.Room", "Room")
                        .WithMany("GameSessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("gameProject.Models.Leaderboard", b =>
                {
                    b.HasOne("gameProject.Models.GameSession", "GameSession")
                        .WithMany("Leaderboards")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gameProject.Models.Player", "Player")
                        .WithMany("Leaderboards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("gameProject.Models.Player", b =>
                {
                    b.HasOne("gameProject.Models.Room", "Room")
                        .WithMany("Players")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gameProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gameProject.Models.PlayerAnswer", b =>
                {
                    b.HasOne("gameProject.Models.Choice", "Choice")
                        .WithMany("PlayerAnswers")
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gameProject.Models.GameSession", "GameSession")
                        .WithMany("PlayerAnswers")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gameProject.Models.Player", "Player")
                        .WithMany("PlayerAnswers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gameProject.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Choice");

                    b.Navigation("GameSession");

                    b.Navigation("Player");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("gameProject.Models.Question", b =>
                {
                    b.HasOne("gameProject.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("gameProject.Models.Quiz", b =>
                {
                    b.HasOne("gameProject.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("gameProject.Models.Room", b =>
                {
                    b.HasOne("gameProject.Models.User", "Host")
                        .WithMany()
                        .HasForeignKey("HostUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("gameProject.Models.Choice", b =>
                {
                    b.Navigation("PlayerAnswers");
                });

            modelBuilder.Entity("gameProject.Models.GameSession", b =>
                {
                    b.Navigation("GameRecord");

                    b.Navigation("Leaderboards");

                    b.Navigation("PlayerAnswers");
                });

            modelBuilder.Entity("gameProject.Models.Player", b =>
                {
                    b.Navigation("Leaderboards");

                    b.Navigation("PlayerAnswers");
                });

            modelBuilder.Entity("gameProject.Models.Question", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("gameProject.Models.Quiz", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("gameProject.Models.Room", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
